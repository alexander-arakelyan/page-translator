apply from: "${rootDir}/gradle/spring.gradle"
apply from: "${rootDir}/gradle/ext.gradle"
apply plugin: "org.springframework.boot"

bootJar {
    mainClass = "org.bambrikii.lang.pagetranslator.export.ExportMain"
    archiveFileName = "${project.name}.jar"
}


dependencies {
    implementation(project(":translator-orm"))
    implementation(project(":export-api"))
    implementation(project(":export-impl"))
    implementation(project(":security-provider"))
    implementation(project(":security-orm"))

    implementation(libs.spring.boot.starter.web)
    implementation(libs.spring.boot.starter.actuator)
    implementation(libs.spring.boot.starter.thymeleaf)

    implementation(libs.spring.boot.starter.data.jpa)

    implementation(libs.gson)

    implementation(libs.jaxb.api)

    implementation(libs.jsoup)
    implementation(libs.postgresql)

    implementation(libs.swagger.swagger2)
    implementation(libs.swagger.ui)

//    implementation(libs.spring.boot.starter.security)
//    implementation(libs.spring.security.oauth.client)

    testImplementation(libs.commons.io)

    annotationProcessor(libs.spring.boot.config.processor)
}

if (project.hasProperty("localDockerRepo")) {
    apply plugin: "com.github.bambrikii.gradle.virtualization.plugin"

    docker {
        namespace = "${localDockerNamespace}"
        repo = "${localDockerRepo}"
        username = "${localDockerUsername}"
        password = "${localDockerPassword}"
        repositories {
//        repository {
//            url = "${dockerRepo}"
//            username = "${dockerUsername}"
//            password = "${dockerPassword}"
//        }
        }
        dockerBuildDir = buildDir // optional, ${project.buildDir} will be used by default
        tagName = "${project.name}" // optional, ${project.name} will be used by default
        containerName = "${project.name}" // optional, ${project.name} will be used by default
        mounts {
            mount {
                host = "/home"
                container = "/temp1"
                options = "z"
            }
            mount {
                host = "/usr/bin"
                container = "/temp2"
                options = "z"
            }
        }
        envs {
            env {
                name = "ENV1"
                value = "ENV1-VAL"
            }
        }
    }
    kubernetes {
        namespace = "${kubernetesNamespace}"
        resources = [
                "${projectDir.path}/src/main/kubernetes/deployment.yaml",
                "${projectDir.path}/src/main/kubernetes/service.yaml",
//            "${projectDir.path}/src/main/kubernetes/mapping.yaml",
        ]
        secretGroups {
            secretGroup {
                name = "regcred"
                secret {
                    file = ".dockerconfigjson=${System.getProperty("user.home")}/.docker/config.json"
                    type = "kubernetes.io/dockerconfigjson"
                }
            }
            secretGroup {
                name = "db"
                secret {
                    name = "db-url"
//                literal = "${DB_URL}"
                    literal = "jdbc:postgresql://postgres:5432/page_translator"
                }
                secret {
                    name = "db-username"
                    literal = "${DB_USERNAME}"
                }
                secret {
                    name = "db-password"
                    literal = "${DB_PASSWORD}"
                }
            }
        }
    }
}
