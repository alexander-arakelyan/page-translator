apply from: "${rootDir}/gradle/spring.gradle"
apply plugin: "org.springframework.boot"
apply from: "${rootDir}/gradle/npm.gradle"
apply from: "${rootDir}/gradle/npm-boot.gradle"
apply from: "${rootDir}/gradle/ext.gradle"

bootJar {
    mainClass = "org.bambrikii.lang.pagetranslator.PageTranslatorMain"
    archiveFileName = "${project.name}.jar"
}

dependencies {
    implementation(project(":translator-orm"))
    implementation(project(":security-provider"))
    implementation(project(":grammar-api"))
    implementation(project(":language-service"))
    implementation(project(":export-api"))

    implementation(libs.spring.boot.starter.web)
    implementation(libs.spring.boot.starter.actuator)
    implementation(libs.spring.boot.starter.thymeleaf)
    implementation(libs.spring.boot.starter.webflux)
    implementation(libs.spring.openapi.ui)

//    implementation(platform(libs.spring.cloud.deps))
//    implementation(libs.spring.cloud.commons)
//    implementation(libs.eureka.client)
    implementation(libs.gson)

    implementation(libs.jaxb.api)

    implementation(libs.itextpdf.itextpdf)
    implementation(libs.itextpdf.itext)
    implementation(libs.itextpdf.xmlworker)

    implementation(libs.jsoup)
    implementation(libs.postgresql)

    implementation(libs.spring.boot.starter.security)
    implementation(libs.spring.security.oauth.client)

    testImplementation(libs.commons.io)

    annotationProcessor(libs.spring.boot.config.processor)
}

test.dependsOn(npmTest)

apply plugin: "com.github.bambrikii.gradle.virtualization.plugin"

docker {
    namespace = "${localDockerNamespace}"
    repo = "${localDockerRepo}"
    username = "${localDockerUsername}"
    password = "${localDockerPassword}"
    repositories {
        repository {
            url = "localhost"
            username = "${dockerUsername}"
            password = "${dockerPassword}"
        }
    }
    dockerBuildDir = buildDir // optional, ${project.buildDir} will be used by default
    tagName = "${project.name}" // optional, ${project.name} will be used by default
    containerName = "${project.name}" // optional, ${project.name} will be used by default
    mounts {
        mount {
            host = "/home"
            container = "/temp1"
            options = "z"
        }
        mount {
            host = "/usr/bin"
            container = "/temp2"
            options = "z"
        }
    }
    envs {
        env {
            name = "ENV1"
            value = "ENV1-VAL"
        }
    }
}
kubernetes {
    namespace = "${kubernetesNamespace}"
    resources = [
            "${projectDir.path}/src/main/kubernetes/deployment.yaml",
            "${projectDir.path}/src/main/kubernetes/service.yaml",
            "${projectDir.path}/src/main/kubernetes/ingress.yaml",
    ]
    secretGroups {
        secretGroup {
            name = "regcred"
            secret {
                file = ".dockerconfigjson=${System.getProperty("user.home")}/.docker/config.json"
                type = "kubernetes.io/dockerconfigjson"
            }
        }
    }
    configmapGroups {
        configmapGroup {
            name = "postgres-config-web"
            configmap {
                name = "POSTGRES_URL"
                literal = "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
            }
        }
    }
    configmapGroups {
        configmapGroup {
            name = "oauth-config"
            configmap {
                name = "OAUTH2_APP_AUTH_TOKEN_SECRET"
                literal = "${OAUTH2_APP_AUTH_TOKEN_SECRET}"
            }
            configmap {
                name = "OAUTH2_GOOGLE_CLIENT_ID"
                literal = "${OAUTH2_GOOGLE_CLIENT_ID}"
            }
            configmap {
                name = "OAUTH2_BASE_URL"
                literal = "${OAUTH2_BASE_URL}"
            }
            configmap {
                name = "OAUTH2_GITHUB_CLIENT_ID"
                literal = "${OAUTH2_GITHUB_CLIENT_ID}"
            }
            configmap {
                name = "OAUTH2_GOOGLE_CLIENT_SECRET"
                literal = "${OAUTH2_GOOGLE_CLIENT_SECRET}"
            }
            configmap {
                name = "OAUTH2_GITHUB_CLIENT_SECRET"
                literal = "${OAUTH2_GITHUB_CLIENT_SECRET}"
            }
        }
    }
}
